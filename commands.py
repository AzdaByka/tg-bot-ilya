import random
from datetime import datetime, timezone, timedelta

import config
from config import score_start_frt, score_start_second, score_end_frt, score_end_second, timer_frt, timer_second

from UserRepo import User, UserRepo

score_template = """
üîî–°–ò–ì–ù–ê–õ!üîî

üìà–í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –Ω–∞ –ª–∏–Ω–∏—é: –ü–û–°–õ–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê more score_start

üí∏ –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞
–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ score_end

–°–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –≤ data –ø–æ –º—Å–∫
"""
tz_info = timezone(timedelta(hours=3))


async def generate_score(user: User) -> str:
    now = datetime.utcnow() + timedelta(hours=3)
    if user.date_next_call > now:
        return "–í—ã—Å—á–∏—Ç—ã–≤–∞—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –æ–∂–∏–¥–∞–π—Ç–µ"
    more = random.choice(['–ë–û–õ–¨–®–ï', '–ú–ï–ù–¨–®–ï'])
    score_start = round(random.uniform(score_start_frt, score_start_second), 2)
    score_end = round(random.uniform(score_end_frt, score_end_second), 2)
    timer_seconds = random.randint(timer_frt, timer_second)
    now = now + timedelta(seconds=timer_seconds)
    await UserRepo.update_query(user.id, {"date_next_call": now})
    answer = score_template.replace("more", more) \
        .replace("score_start", str(score_start)) \
        .replace("score_end", str(score_end)).replace("data", now.strftime("%H:%M:%S"))
    return answer


async def add_admin(user_name: str) -> str:
    user = await UserRepo.find_by_name(user_name)
    if user is not None:
        return '–¢–∞–∫–æ–π –∞–¥–º–∏–Ω —É–∂–µ –µ—Å—Ç—å'
    else:
        await UserRepo.insert(User(name=user_name, role='admin', date_next_call=datetime.utcnow() + timedelta(hours=3)))
        return '–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω'


async def add_user(user_id: int) -> str:
    user = await UserRepo.find_one(user_id)
    if user is not None:
        return '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å'
    else:
        await UserRepo.insert(User(id=user_id, role='user', date_next_call=datetime.utcnow() + timedelta(hours=3)))
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω'


async def edit_timer(_timer_frt: str, _timer_second: str) -> str:
    config.timer_frt = _timer_frt
    config.timer_second = _timer_second
    await save_in_file('timer.txt', _timer_frt + ' ' + _timer_second)
    return '–¢–∞–∏ÃÜ–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω'


async def edit_score_start(_score_start_frt: str, _score_start_second: str) -> str:
    config.score_start_frt = _score_start_frt
    config.score_start_second = _score_start_second
    await save_in_file('score_start.txt', _score_start_frt + ' ' + _score_start_second)
    return 'score_start –æ–±–Ω–æ–≤–ª–µ–Ω'


async def edit_score_end(_score_end_frt: str, _score_end_second: str) -> str:
    config.score_end_frt = _score_end_frt
    config.score_end_second = _score_end_second
    await save_in_file('score_end.txt', _score_end_frt + ' ' + _score_end_second)
    return 'score_end –æ–±–Ω–æ–≤–ª–µ–Ω'


async def delete_admin(user_name: str) -> str:
    user = await UserRepo.find_by_name(user_name)
    if user is None:
        return '–¢–∞–∫–æ–π –∞–¥–º–∏–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    else:
        await UserRepo.delete_one(user_name)
        return '–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω'


async def save_in_file(file_name: str, text: str):
    with open(file_name, 'w') as file:
        file.write(text)
